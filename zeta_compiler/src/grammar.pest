WHITESPACE   = _{ " " | "\t" | "\r" | "\n" }
COMMENT      = _{ "#" ~ (!"\n" ~ ANY)* }

program      =  { SOI ~ stmt* ~ EOI }

stmt         = _{ import_stmt | let_stmt | return_stmt | if_stmt | while_stmt | for_stmt | match_stmt | unsafe_block | fun_decl | class_decl | expr_stmt }

import_stmt  = { "import" ~ string }
let_stmt     = { "let" ~ mut_keyword? ~ ident ~ type_annotation? ~ "=" ~ expr }
return_stmt  = { "return" ~ expr? }
if_stmt      = { "if" ~ expr ~ block ~ (("else" ~ (block | if_stmt))?) }
while_stmt   = { "while" ~ expr ~ block }
for_stmt = { "for" ~ "(" ~ let_stmt? ~ ";" ~ expr? ~ ";" ~ expr? ~ ")" ~ block }
match_stmt   = { "match" ~ expr ~ "{" ~ match_arm* ~ "}" }
unsafe_block = { "unsafe" ~ block }
expr_stmt    = { expr }



fun_decl = {
    visibility_modifier? ~ async_modifier? ~ unsafe_modifier? ~ "fun" ~ ident ~ param_list ~ type_annotation? ~ block
}

visibility_modifier = { "public" | "private" | "protected" }
async_modifier = { "async" }
unsafe_modifier = { "unsafe" }


class_decl   = { visibility? ~ "class" ~ ident ~ param_list? ~ block }

param_list   = { "(" ~ (param ~ ("," ~ param)*)? ~ ")" }
param        = { ident ~ type_annotation? }
type_annotation = { ":" ~ ident }

block        = { "{" ~ stmt* ~ "}" }

match_arm    = { pattern ~ "=>" ~ block }

pattern      = _{ ident | number | string | tuple_pattern | wildcard_pattern }
tuple_pattern = { "(" ~ (pattern ~ ("," ~ pattern)*)? ~ ")" }
wildcard_pattern = { "_" }

visibility   = _{ public_keyword | private_keyword | protected_keyword }
public_keyword    = { "public" }
private_keyword   = { "private" }
protected_keyword = { "protected" }

mut_keyword  = { "mut" }

ident        = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
number       = @{ ASCII_DIGIT+ }
string       = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

expr         = { assignment }

assignment   = { lhs ~ assign_op ~ expr | logic_or }

lhs          = { ident }

logic_or     = { logic_and ~ ("||" ~ logic_and)* }
logic_and    = { bit_or ~ ("&&" ~ bit_or)* }
bit_or       = { bit_xor ~ ("|" ~ bit_xor)* }
bit_xor      = { bit_and ~ ("^" ~ bit_and)* }
bit_and      = { equality ~ ("&" ~ equality)* }
equality     = { comparison ~ (("==" | "!=") ~ comparison)* }
comparison   = { shift ~ (("<" | ">" | "<=" | ">=") ~ shift)* }
shift        = { term ~ (("<<" | ">>") ~ term)* }
term         = { factor ~ (("+" | "-") ~ factor)* }
factor       = { unary ~ (("*" | "/" | "%") ~ unary)* }
unary        = { ("!" | "-" | "+")* ~ primary }
primary      = _{ number | string | ident | "(" ~ expr ~ ")" }

compound_assign_op = {
    "+=" | "-=" | "*=" | "/=" | "%=" |
    ">>=" | "<<=" | "&=" | "|=" | "^="
}

assign_expr = {
    ident ~ (assign_op | compound_assign_op) ~ expr
}

assign_op = { "=" | compound_assign_op }

comparison_op = { "==" | "!=" | "<=" | ">=" | "<" | ">" }

comparison_expr = {
    expr ~ comparison_op ~ expr
}

